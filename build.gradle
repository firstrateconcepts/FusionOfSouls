buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		google()
		gradlePluginPortal()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "org.beryx:badass-runtime-plugin:1.12.6"
	}
}

apply plugin: 'kotlin'
apply plugin: "org.beryx.runtime"
apply plugin: 'application'
sourceCompatibility = 8.0
compileJava {
	options.incremental = true
}

test {
	useJUnitPlatform()
}

version = '0.1.0'
ext.appName = 'fusion-of-souls'
repositories {
	mavenLocal()
	mavenCentral()
	gradlePluginPortal()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	maven { url 'https://jitpack.io' }
	maven { url "https://artifactory.nimblygames.com/artifactory/ng-public-release/" }
}

mainClassName = 'com.runt9.fusionOfSouls.Lwjgl3Launcher'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
	implementation "com.soywiz.korlibs.korma:korma-jvm:$korlibsVersion"
	implementation "com.soywiz.korlibs.korgw:korgw-jvm:$korlibsVersion"
	implementation "com.soywiz.korlibs.klock:klock-jvm:$korlibsVersion"

	implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-ai:$aiVersion"
	implementation "com.badlogicgames.ashley:ashley:$ashleyVersion"
	implementation "com.github.tommyettinger:anim8-gdx:$anim8Version"
	implementation "com.github.tommyettinger:regexodus:$regExodusVersion"
	implementation "com.strongjoshua:libgdx-inGameConsole:$inGameConsoleVersion"
	implementation "com.github.tommyettinger:libgdx-utils:$utilsVersion"

	implementation "com.squidpony:squidlib:$squidLibVersion"
	implementation "com.squidpony:squidlib-extra:$squidLibVersion"
	implementation "com.squidpony:squidlib-util:$squidLibVersion"

	implementation "io.github.libktx:ktx-app:$ktxVersion"
	implementation "io.github.libktx:ktx-actors:$ktxVersion"
	implementation "io.github.libktx:ktx-ashley:$ktxVersion"
	implementation "io.github.libktx:ktx-assets:$ktxVersion"
	implementation "io.github.libktx:ktx-async:$ktxVersion"
	implementation "io.github.libktx:ktx-collections:$ktxVersion"
	implementation "io.github.libktx:ktx-freetype:$ktxVersion"
	implementation "io.github.libktx:ktx-graphics:$ktxVersion"
	implementation "io.github.libktx:ktx-inject:$ktxVersion"
	implementation "io.github.libktx:ktx-json:$ktxVersion"
	implementation "io.github.libktx:ktx-log:$ktxVersion"
	implementation "io.github.libktx:ktx-math:$ktxVersion"
	implementation "io.github.libktx:ktx-preferences:$ktxVersion"
	implementation "io.github.libktx:ktx-vis:$ktxVersion"
	implementation "io.github.libktx:ktx-vis-style:$ktxVersion"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
	testImplementation "com.willowtreeapps.assertk:assertk-jvm:$assertkVersion"
	testImplementation "io.mockk:mockk:$mockkVersion"
}

jar {
	archiveBaseName.set(appName)
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}

	manifest {
		attributes 'Main-Class': project.mainClassName
	}

	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}

runtime {
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	launcher {
		noConsole = true
	}
	jpackage {
		// Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
		// targetPlatformName = "mac"

		def currentOs = org.gradle.internal.os.OperatingSystem.current()
		installerOptions += ['--resource-dir', "src/main/resources"]
		installerOptions += ['--vendor', 'First Rate Concepts']

		imageOutputDir = file("$buildDir/package/image")
		installerOutputDir = file("$buildDir/package/install")

		imageName = "Fusion of Souls"
		installerName = "Fusion of Souls"

		if(currentOs.windows) {
			installerOptions += [
					'--win-dir-chooser',
					'--win-menu',
					'--win-upgrade-uuid', '786a1694-b2cd-4fc5-a823-d5625177903c'
			]
			installerType = "msi"
		}
		else if (currentOs.linux) {
			installerOptions += ['--linux-package-name', 'fusion-of-souls','--linux-shortcut']
		}
		else if (currentOs.macOsX) {
			installerOptions += [
					'--mac-package-name', 'Fusion of Souls',
					'--mac-package-identifier', 'fusion-of-souls'
			]
			appVersion = version.replace('^0\\.', '1.')
		}
	}
}
